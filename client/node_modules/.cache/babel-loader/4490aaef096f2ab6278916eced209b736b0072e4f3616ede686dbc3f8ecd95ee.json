{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user1\\\\spring-react\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [data, setData] = useState([]);\n  const [newMember, setNewMember] = useState({\n    member_name: \"\",\n    email: \"\"\n  });\n\n  // fetchData라는 이름을 정의하여 try-catch 문을 사용해 비동기작업 중 발생하는 에러를 잡아내고 콘솔에 메세지를 출력하는 것\n  // 간접적으로 호출\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const res = await axios.get(\"http://localhost:8080/api/member\", {\n          withCredentials: true\n        });\n        setData(res.data);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    fetchData();\n  }, []);\n\n  // 데이터 작성한 내용으로 변경하는 함수\n  // e : even의 약자\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setNewMember(prevMember => ({\n      ...prevMember,\n      [name]: value\n    })); // prevMember을 복제해서 name을 내가 쓴 값으로 설정하는 것\n  };\n\n  // 데이터 보내줄 버튼함수 post 추가\n  const handleAddMember = async () => {\n    try {\n      const response = await axios.post(\"http://localhost:8080/api/member\", newMember, {\n        withCredentials: true\n      });\n      // 변경된 데이터 값 저장\n      setData(prevMember => [...prevMember, response.data]);\n\n      // 데이터 저장된 후 빈 값으로 초기화 하기 원한다면 초기화도 진행\n      setNewMember({\n        member_name: \"\",\n        email: \"\"\n      });\n    } catch (error) {\n      console.error(\"데이터가 부적합합니다.\", error);\n    }\n  };\n\n  /*\n  직접적으로 한 번에 axios를 호출하는지 차이가 있을 뿐 위 코드와 아래 코드는 같은 것임.\n  \n  useEffect 안에서 직접 비동기 작업을 수행하고 간단하게 catch문을 사용하여 에러를 처리하고 콘솔에 에러 메세지를 출력\n   useEffect(() => {\n    axios\n      // API 주소값을 가져옴.\n      .get(\"http://localhost:8080/api/expression\", { withCredentials: true })\n      // response와 res는 같은 의미이며, 안에 변수값은 정해진 변수값은 없지만 되도록이면 res response를 사용하면 더 좋음 !\n      .then((res) => {\n        setData(res.data);\n      })\n      .catch((error) => {\n        console.log(\"데이터없음\", error);\n      });\n    // 처음에만 가져올 것이기 때문에 [] 공백을 넣어줌.\n  }, []);\n  */\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"API \\uD638\\uCD9C \\uD655\\uC778\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: data.map(member => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [member.membername, \" = \", member.email]\n      }, member.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uC0C8\\uB85C\\uC6B4 \\uD68C\\uC6D0 \\uC800\\uC7A5\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"\\uD68C\\uC6D0 \\uC774\\uB984 : \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"membername\",\n        value: newMember.member_name,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"\\uD68C\\uC6D0 \\uC774\\uBA54\\uC77C : \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"email\",\n        value: newMember.email,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddMember,\n      children: \"\\uD68C\\uC6D0 \\uC800\\uC7A5\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"vidPglGMo8/X6vty+DqdESyd4AE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","App","_s","data","setData","newMember","setNewMember","member_name","email","fetchData","res","get","withCredentials","error","console","log","handleInputChange","e","name","value","target","prevMember","handleAddMember","response","post","children","fileName","_jsxFileName","lineNumber","columnNumber","map","member","membername","id","type","onChange","onClick","_c","$RefreshReg$"],"sources":["C:/Users/user1/spring-react/client/src/App.js"],"sourcesContent":["import \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const [newMember, setNewMember] = useState({ member_name: \"\", email: \"\" });\n\n  // fetchData라는 이름을 정의하여 try-catch 문을 사용해 비동기작업 중 발생하는 에러를 잡아내고 콘솔에 메세지를 출력하는 것\n  // 간접적으로 호출\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const res = await axios.get(\"http://localhost:8080/api/member\", {\n          withCredentials: true,\n        });\n        setData(res.data);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    fetchData();\n  }, []);\n\n  // 데이터 작성한 내용으로 변경하는 함수\n  // e : even의 약자\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setNewMember((prevMember) => ({ ...prevMember, [name]: value })); // prevMember을 복제해서 name을 내가 쓴 값으로 설정하는 것\n  };\n\n  // 데이터 보내줄 버튼함수 post 추가\n  const handleAddMember = async () => {\n    try {\n      const response = await axios.post(\n        \"http://localhost:8080/api/member\",\n        newMember,\n        {\n          withCredentials: true,\n        }\n      );\n      // 변경된 데이터 값 저장\n      setData((prevMember) => [...prevMember, response.data]);\n\n      // 데이터 저장된 후 빈 값으로 초기화 하기 원한다면 초기화도 진행\n      setNewMember({ member_name: \"\", email: \"\" });\n    } catch (error) {\n      console.error(\"데이터가 부적합합니다.\", error);\n    }\n  };\n\n  /*\n  직접적으로 한 번에 axios를 호출하는지 차이가 있을 뿐 위 코드와 아래 코드는 같은 것임.\n\n\n\n  useEffect 안에서 직접 비동기 작업을 수행하고 간단하게 catch문을 사용하여 에러를 처리하고 콘솔에 에러 메세지를 출력\n\n  useEffect(() => {\n    axios\n      // API 주소값을 가져옴.\n      .get(\"http://localhost:8080/api/expression\", { withCredentials: true })\n      // response와 res는 같은 의미이며, 안에 변수값은 정해진 변수값은 없지만 되도록이면 res response를 사용하면 더 좋음 !\n      .then((res) => {\n        setData(res.data);\n      })\n      .catch((error) => {\n        console.log(\"데이터없음\", error);\n      });\n    // 처음에만 가져올 것이기 때문에 [] 공백을 넣어줌.\n  }, []);\n  */\n  return (\n    <div>\n      <h1>API 호출 확인</h1>\n      <ul>\n        {data.map((member) => (\n          <li key={member.id}>\n            {member.membername} = {member.email}\n          </li>\n        ))}\n      </ul>\n      <h2>새로운 회원 저장</h2>\n      <div>\n        <label>회원 이름 : </label>\n        <input\n          type=\"text\"\n          name=\"membername\"\n          value={newMember.member_name}\n          onChange={handleInputChange}\n        />\n      </div>\n      <div>\n        <label>회원 이메일 : </label>\n        <input\n          type=\"text\"\n          name=\"email\"\n          value={newMember.email}\n          onChange={handleInputChange}\n        />\n      </div>\n      <button onClick={handleAddMember}>회원 저장</button>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}